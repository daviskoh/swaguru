var NewUserFormView = Backbone.View.extend({
  tagName: 'div',
  className: 'container1 rows',

  events: {
    'submit': 'createUser'
  },

  template: _.template($("script.sign-up-form[type='text/html']").html()),

  initialize: function(opts) {
    console.log('UserFormView initialized');

    this.model = opts.model;
    this.model.url = '/api/users';

    this.submitButton = this.$el.find("input[type='submit']");
    this.render();
    return this;
  },

  attributes: function() {
    return {
      name: this.name,
      email: this.email,
      password: this.password,
      password_confirmation: this.passwordConfirmation,
      gender: this.gender
    };
  },

  createUser: function(e) {
    e.preventDefault();
    this.model.clear();

    // make sure user CANT hit submit more than once
    // make sure user is not ALREADY created
    if (this.submitButton.hasClass('disabled') && this.$el.data('user-created') !== true) {
      return false;
    } else {
      // when submit form immediately add class to form
      this.submitButton.addClass('disabled');
    }

    // user input /////////////////////////////////////////////////////////////////////////
    this.name = this.$el.find("input[name='name']").val();
    this.email = this.$el.find("input[name='email']").val();
    this.password = this.$el.find("input[name='password']").val();
    this.passwordConfirmation = this.$el.find("input[name='password_confirmation']").val();
    this.gender = this.$el.find("select[name='gender']").val();

    // define context to be used in below user.save() method
    var self = this;
    // instantiate new user w/ attributes from user inputs
    // var user = new User(this.attributes());
    console.log(this.model);
    this.model.set('id', null);
    this.model.set(this.attributes());

    console.log("new User instantiated");
    // save (create new) user w/ attributes specified above //////////////////////////////
    // user.save(null, {
    this.model.save(null, {
      success: function(model, resp) {
        console.log('user save success callback');
        self.model.clear().set(resp);

        self.$el.data('user-created', true);
        // document.location.href = '/';
        console.log(resp);

        response = arguments;

        Backbone.history.navigate('session/new', {trigger: true});
      },
      error: function(model, resp, opts) {
        console.log('error');

        self.$el.find('input').removeClass('error');
        var errors = JSON.parse(resp.responseText).errors;
        _.each(errors, function(value, key) {
          self.$el.find("input=[name=" + key + "]").addClass('error');
        });

        self.submitButton.removeClass('disabled');
      }
    });

    console.log('name: %s, email: %s, password: %s, password-confirm: %s, gender: %s', this.name, this.email, this.password, this.passwordConfirmation, this.gender);

    // this.el.reset();

    return (this.$el.data('user-created') === true);
  },

  render: function(){
    this.$el.html(this.template());
  }
});