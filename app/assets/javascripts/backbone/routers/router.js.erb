var Router = Backbone.Router.extend({
  routes: {
    '': 'welcome',
    'users/new': 'usersNew',
    'session/new': 'sessionNew',
    'users/:id': 'userShow'
  },

  initialize: function(opts) {
    console.log("Router created");

    this.session = opts.session;
    this.user = opts.user;

    // $.ajax({
    //   url: "session",
    //   type: "GET",
    //   dataType: "json",
    //   success: function(sessionJSON) {
    //     console.log('retrieved session id');

    //     sessionID = sessionJSON;

    //     response = arguments;
    //   },
    //   context: this
    // });
    
    this.loadNavigationView();
  },

  welcome: function() {
    this.loadView(new WelcomeView());
  },

  usersNew: function() {
    console.log('users/new route hit');
    this.loadView(new NewUserFormView({model: this.user}));
  },

  sessionNew: function() {
    console.log('sessions/new route hit');
    this.loadView(new SignInFormView({session: this.session, model: this.user}));
    // session: this.session, 
  },

  userShow: function(id) {
    console.log('users/%s route hit', id);

    this.user.url = '/api/users/' + id;

    console.log('current user url: %s', this.user.get('url'));
    
    var self = this;
    // console.log(self.user);

    // self.user.set('id', id);

    // self.user.fetch({
    //   success: function() {
    //     _.each(arguments, console.log);
    //   },
    //   error: function() {
    //     _.each(arguments, console.log);
    //   }
    // });

    $.ajax({
      url: "/api/users/" + id,
      type: "GET",
      dataType: "json",
      success: function(userJSON) {
        console.log('user show GET success');

        self.user.set(userJSON);

        response = arguments;

        // populate this.user w/ user model w/ resp for rendering in usershowview
        this.loadView(new UserShowTopView({model: self.user}));

        // SEPARATE USERSHOWPAGE INTO 2 SEPARATE VIEWS

        $('body').append(new UserShowBottomView({model: self.user, collection: new UserPhotos()}).el);

        // responsible for profile phot changes
        // remains invisible until revealed
        if (sessionID) {
          $('body').append((new ProfilePhotoModalView({model: self.user})).el);
          // reinitialize foundation
          $(document).foundation();
          console.log('REINIT foundation');
        }
      },
      context: this
    });

    // console.log(this.user);
  },

  loadView: function(view) {
    // $('.fixed').nextAll().remove();
    $('body').empty();

    // instantiate navigation each time new page is loaded
    this.loadNavigationView();
    
    // console.log('this.main: %s', this.main);
    $('body').append(view.el);
  },

  loadNavigationView: function() {
    $('body').append(new NavigationView({session: this.session}).el);    
  }
});